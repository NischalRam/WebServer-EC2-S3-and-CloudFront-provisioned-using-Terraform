#provider

provider "aws" {
  profile = "nischal"
  region  = "ap-south-1"
}

#vpc

resource "aws_vpc" "aws_vpc_1" {
  cidr_block = "10.0.0.0/16"
  tags={
    Name= "aws_vpc_1"
 }
}

#internet gateway

resource "aws_internet_gateway" "aws_internet_gateway_1" {
  vpc_id = aws_vpc.aws_vpc_1.id
}

#aws subnet 

resource "aws_subnet" "aws_subnet_1" {
  vpc_id     =  aws_vpc.aws_vpc_1.id
  cidr_block = "10.0.1.0/24"
}

#aws route table

resource "aws_route_table" "aws_route_table_1"{
vpc_id= aws_vpc.aws_vpc_1.id
route{
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.aws_internet_gateway_1.id
     }
    depends_on=["aws_internet_gateway.aws_internet_gateway_1"]

}

resource "aws_route_table_association" "aws_route_table_association_1" {
  subnet_id      = aws_subnet.aws_subnet_1.id
  route_table_id = aws_route_table.aws_route_table_1.id
}

resource "aws_network_acl" "aws_network_acl_1" {
  vpc_id = aws_vpc.aws_vpc_1.id

  egress {
    protocol   = "-1"
    rule_no    = 100
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 0
  }

  ingress {
    protocol   = "-1"
    rule_no    = 200
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 0
  }

  tags = {
    Name = "aws_network_acl_1"
  }
}

#aws_eip

resource "aws_eip" "aws_eip_1" {
  instance = aws_instance.aws_instance_1.id
  vpc      = true
depends_on=["aws_internet_gateway.aws_internet_gateway_1"]
}


#creating securitygroup

resource "aws_security_group" "aws_security_group_1" {
  name        = "allow_traffic"
  description = "Allow TLS inbound traffic"
  vpc_id      = "aws_vpc.aws_vpc_1.id"

  ingress {
    description = "http"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "ssh"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "ping"
    from_port   = -1
    to_port     = -1
    protocol    = "icmp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = 
  {
    Name = "allow_traffic"
  }
}

#ec2 instance launch

resource "aws_instance" "aws_instance_1" {
  ami             = "ami-0447a12f28fddb066"
  instance_type   = "t2.micro"
  security_groups = [ "allow_traffic" ]
  key_name = "newkey"
  subnet_id      = aws_subnet.aws_subnet_1.id
   

  connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("C:/Users/91986/Desktop/aws/newkey.pem")
    host        = aws_instance.aws_instance_1.public_ip
  }

  provisioner "remote-exec" {
    inline = [
      "sudo yum install httpd php git -y",
      "sudo systemctl restart httpd",
      "sudo systemctl enable httpd"
    ]
  }
  tags =
  {
    Name = "aws_instance_1"
  }
}

# create volume

resource "aws_ebs_volume" "aws_ebs_volume_1" {
 availability_zone = aws_instance.aws_instance_1.availability_zone
 size = 1
 tags = {
   Name = "aws_ebs_volume_1"
 }
}

# attach volume

resource "aws_volume_attachment" "aws_volume_attachment_1" {

depends_on = [
    aws_ebs_volume.aws_ebs_volume_1,
  ]
 device_name  = "/dev/xvdf"
 volume_id    = aws_ebs_volume.aws_ebs_volume_1.id
 instance_id  = aws_instance.aws_instance_1.id
 force_detach = true

connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("C:/Users/91986/Desktop/aws/newkey.pem")
    host        = aws_instance.aws_instance_1.public_ip
  }

provisioner "remote-exec" {
    inline = [
      "sudo mkfs.ext4 /dev/xvdf",
      "sudo mount /dev/xvdf /var/www/html",
      "sudo rm -rf /var/www/html/*",
      "sudo git clone https://github.com/NischalRam/aws_task-1.git /var/www/html/"

    ]
  }
}

# s3 bucket

resource "aws_s3_bucket" "aws_s3_bucket_1" {
  bucket = "123mywebbucket321220"
  acl    = "public-read"
  region = "ap-south-1"

  tags = {
    Name = "123mywebbucket321220"
  }
}

# adding object to s3

resource "aws_s3_bucket_object" "aws_s3_bucket_object_1" {

depends_on = [
    aws_s3_bucket.aws_s3_bucket_1,
  ]
    bucket  = aws_s3_bucket.aws_s3_bucket_1.bucket
    key     = "logo.jpg"
    source  = "C:/Users/91986/Desktop/aws_logo_smile_1200x630.png"
    acl     = "public-read"
}

output "bucketid" {
  value = aws_s3_bucket.aws_s3_bucket_1.bucket
}
output "myos_ip" {
  value = aws_instance.aws_instance_1.public_ip
}
# cloud front

variable "oid" {
	type    = string
 	default = "S3-"
}

locals {
  s3_origin_id = "${var.oid}${aws_s3_bucket.aws_s3_bucket_1.id}"
}

resource "aws_cloudfront_distribution" "aws_cloudfront_distribution_1" {
depends_on = [
    aws_s3_bucket_object.aws_s3_bucket_object_1,
  ]
  origin {
    domain_name = aws_s3_bucket.aws_s3_bucket_1.bucket_regional_domain_name
    origin_id   = local.s3_origin_id
  }

  enabled             = true
  default_cache_behavior {
    allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = local.s3_origin_id

    forwarded_values {
      query_string = false

      cookies {
        forward = "none"
      }
    }

    viewer_protocol_policy = "allow-all"
    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
  }

  restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }

  viewer_certificate {
    cloudfront_default_certificate = true
  }


connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("C:/Users/91986/Desktop/aws/newkey.pem")
    host        = aws_instance.aws_instance_1.public_ip
  }

provisioner "remote-exec" {
    inline = [
      "sudo su <<END",
      "echo \"<img src='http://${aws_cloudfront_distribution.aws_cloudfront_distribution_1.domain_name}/${aws_s3_bucket_object.aws_s3_bucket_object_1.key}' height='400' width='400'>\" >> /var/www/html/file.html",
      "END",
    ]
  }
}

resource "null_resource" "openwebsite"  {

depends_on = [
    aws_cloudfront_distribution.aws_cloudfront_distribution_1, aws_volume_attachment.aws_volume_attachment_1
  ]
	provisioner "local-exec" {
	    command = "start chrome  http://${aws_instance.aws_instance_1.public_ip}/file.html"
  	}
}

